# __author__ = "Daniele Antonucci
# __credits__ = "Daniele Antonucci"]
# __license__ = "MIT"
# __version__ = "0.1"
# __maintainer__ = "Daniele Antonucci"


# DATA synthetic creation 
from sdv.metadata import SingleTableMetadata
from sdv.evaluation.single_table import run_diagnostic, evaluate_quality
from sdv.evaluation.single_table import get_column_plot
from sdv.single_table import CTGANSynthesizer
import pandas as pd

def generate_model(dataset, synth_model, save_model, name_model):
    '''
    Create synthetic data unsing sdv library

    :param dataset: dataset to be synthetize
    :param synth_model: type of alogorithm to be used for the synthetization 
        CTGAN -> CTGANSynthesizer
    :param save_model: Save(True) or not save(False) the model
    :param name_model: name of the model to be saved

    :return synthetizer: generative model 
    :return metadata: building model metadata
    '''
    # Define the metadata automaticcaly from the dataset
    metadata = SingleTableMetadata()
    metadata.detect_from_dataframe(dataset)
    
    if synth_model == 'CTGAN':
        # Synthetize data
        synthesizer = CTGANSynthesizer(
            metadata,
            enforce_rounding=False,
            epochs=500,
            verbose=True)

    
    synthesizer.fit(dataset)

    # GEnerate report from data
    if save_model == True:
        synthesizer.save(filepath=name_model)
    
    return synthesizer, metadata

def generate_data_and_report(dataset:pd.DataFrame, synthesizer, metadata:SingleTableMetadata, number_of_row:int):
    '''
    Generate data and provide 
    :param dataset: initial dataset non synthetized
    :param synthetizer: model synthetized
    :param metadata: metadata of the dataset
    :number_of_row: number of elements to be generated by the model

    '''
    synthetic_data = synthesizer.sample(num_rows=number_of_row)
    # 1. perform basic validity checks
    diagnostic = run_diagnostic(dataset, synthetic_data, metadata)

    # 2. measure the statistical similarity
    quality_report = evaluate_quality(dataset, synthetic_data, metadata)
    

    #3 plot specific variable
    fig = get_column_plot(
        real_data=dataset,
        synthetic_data=synthetic_data,
        metadata=metadata,
        column_name='ETH'
    )
    
    return synthetic_data, diagnostic, fig, quality_report.get_details(property_name='Column Shapes')

if __name__ == "__main__":
    # Get data
    dataset_A = pd.read_csv("data/Dataset_bui_residential_A.csv", header=0, index_col=0) [:100]
    #dataset_A = pd.read_csv("EPC_Git/data/Dataset_bui_residential_A.csv", header=0, index_col=0) [:100]
    mdl = generate_model(
        dataset=dataset_A,
        synth_model='CTGAN',
        save_model=False, 
        name_model=""
    )
    data_report = generate_data_and_report(
        dataset=dataset_A,
        synthesizer=mdl[0],
        metadata=mdl[1],
        number_of_row=100
    )
    data_report[0].to_csv("data/synt_data_A.csv")
    print(data_report[0])

